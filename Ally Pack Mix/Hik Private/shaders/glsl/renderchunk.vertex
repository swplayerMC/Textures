// __multiversion__
#include "vertexVersionCentroid.h"
#include "uniformWorldConstants.h"
#include "uniformPerFrameConstants.h"
#include "uniformShaderConstants.h"
#include "uniformRenderChunkConstants.h"

#include "function/compute.glsl"
#include "function/fog.glsl"
#include "function/grain.glsl"
#include "function/dimension.glsl"

#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		_centroid out vec2 uv0;
		_centroid out vec2 uv1;
	#endif
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif

#ifndef BYPASS_PIXEL_SHADER
	varying vec4 color;
#endif

#ifdef FOG
	varying vec4 fogColor;
#endif

varying vec4 haze;
varying float uncolor;

//New time scale counter with range, in second, [0, 3600].
uniform float TOTAL_REAL_WORLD_TIME;

attribute POS4 POSITION;
attribute vec4 COLOR;
attribute vec2 TEXCOORD_0;
attribute vec2 TEXCOORD_1;

const float rA = 1.0;
const float rB = 1.0;
const vec3 UNIT_Y = vec3(0,1,0);
const float DIST_DESATURATION = 56.0 / 255.0; //WARNING this value is also hardcoded in the water color, don'tchange

void main() {
    POS4 worldPos;

	#ifdef AS_ENTITY_RENDERER
			POS4 pos = WORLDVIEWPROJ * POSITION;
			worldPos = pos;
	#else
		worldPos.xyz = (POSITION.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz;
		worldPos.w = 1.0;

		// Transform to view space before projection instead of all at once to avoid floating point errors
		// Not required for entities because they are already offset by camera translation before rendering
		// World position here is calculated above and can get huge
		POS4 pos = WORLDVIEW * worldPos;
		pos = PROJ * pos;
	#endif

    gl_Position = pos;
    
    vec3 blockPos = mod((WORLD * POSITION).xyz * CHUNK_ORIGIN_AND_SCALE.w, 16.0);

	#ifndef BYPASS_PIXEL_SHADER
		uv0 = TEXCOORD_0;
		uv1 = TEXCOORD_1;
		color = COLOR;
	#endif

	///// find distance from the camera
	#if defined(FOG) || defined(BLEND)
		#ifdef FANCY
			vec3 relPos = -worldPos.xyz;
			float cameraDepth = length(relPos);
		#else
			float cameraDepth = pos.z;
		#endif
	#endif

	/////waviy leaves
	#ifdef FANCY
		#ifdef ALPHA_TEST
			if(color.g >= color.b && color.g > color.r || color.b > color.r) {
				gl_Position.x += sineWave(blockPos.x * 1.2 + blockPos.z * 0.7, 0.05, TOTAL_REAL_WORLD_TIME * 0.07, 0.0) * sineWave(blockPos.x * 0.5 + blockPos.z * 0.9, 0.08, TOTAL_REAL_WORLD_TIME * 0.3, 2.4);
			}
		#endif
	#endif

	///// apply fog
	#ifdef FOG
		float len = cameraDepth / RENDER_DISTANCE;
		#ifdef ALLOW_FADE
			len += RENDER_CHUNK_FOG_ALPHA;
		#endif
		fogColor.rgb = FOG_COLOR.rgb;
		fogColor.a = clamp((len - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 3.0);
	#endif
	float dist = clamp(length(worldPos.xyz) / RENDER_DISTANCE, 0.0, 4.0);
	haze.rgb = FOG_COLOR.rgb;
	haze.a = CurveMap(dist);

	/////monochrome check
	uncolor = 1.0;
	if(!(nether(FOG_COLOR.rgb) && underwater(FOG_CONTROL.x))) {
		uncolor = mix(1.0, clamp(range1(FOG_CONTROL.y, 1.0, 0.9, 1.0, 0.8), 0.0, 1.0), uv1.y);
	}
}
